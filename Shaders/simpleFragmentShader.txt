in vec3 position_eye, normal_eye;

uniform mat4 proj, view, model;
uniform vec3 light_pos;

// fixed point light properties
vec3 light_position_world = light_pos;
vec3 Ls = vec3 (1.0, 1.0, 1.0); // white specular colour
vec3 Ld = vec3 (0.7, 0.7, 0.7); // dull white diffuse light colour
vec3 La = vec3 (0.2, 0.2, 0.2); // grey ambient colour

// surface reflectance
vec3 Ks = vec3 (1.0, 1.0, 1.0); // fully reflect specular light
vec3 Kd = vec3 (1.0, 0.5, 0.0); // orange diffuse surface reflectance 
vec3 Ka = vec3 (1.0, 1.0, 1.0); // fully reflect ambient light
float specular_exponent = 100.0; // specular 'power'

out vec4 gl_FragColor; // final colour of surface

void main () {
	// ambient intensity
	vec3 Ia = La * Ka;

	// diffuse intensity
	// raise light position to eye space
	vec3 light_position_eye = vec3(view * vec4 (light_position_world, 1.0));
	vec3 L = normalize (light_position_eye - position_eye);
	float dot_prod = max(dot (L, normal_eye), 0.0);
	vec3 Id = Ld * Kd * dot_prod; // final diffuse intensity

	// specular intensity
	vec3 R = reflect (-L, normal_eye);
	vec3 V = normalize (-position_eye);
	float dot_prod_specular = max(dot (R, V), 0.0);
	float specular_factor = pow (dot_prod_specular, specular_exponent);
	vec3 Is = Ls * Ks * specular_factor; // final specular intensity

	// final colour
	gl_FragColor = vec4 (Is + Id + Ia, 1.0);
}